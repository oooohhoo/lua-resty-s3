upstream php-owncloud {
    server unix:/dev/shm/owncloud.sock;
}
 
server {
    listen 80;
    server_name _;
    return 301 https://$server_name$request_uri;
}
 
server {
    listen 443 ssl;
    server_name _;
 
    ssl_certificate /usr/local/openresty/nginx/ssl/getui.com.crt;
    ssl_certificate_key /usr/local/openresty/nginx/ssl/getui.com.key;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-bundle.crt;
 
    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this topic first.
    add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
 
    # Path to the root of your installation
    root /app/owncloud/web/;
 
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
 
    location = /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }
 
    location /.well-known/acme-challenge { }
 
    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;
 
    # Disable gzip to avoid the removal of the ETag header
    gzip off;
 
    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;
 
    location / {
        rewrite ^ /index.php$uri;
    }
 
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        return 404;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
        return 404;
    }
 
    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTPS on;
        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice
        fastcgi_param front_controller_active true;
        fastcgi_pass php-owncloud;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering on; #Available since nginx 1.7.11
    }

    location ^~ /remote-redirected {
        internal;
        fastcgi_split_path_info ^(remote-redirected)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_NAME remote.php;
        fastcgi_param DOCUMENT_URI /remote.php$fastcgi_path_info;
        fastcgi_param SCRIPT_FILENAME $document_root/remote.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param BEFORE_UPLOAD $before_upload;
        fastcgi_param AFTER_UPLOAD $after_upload;
        fastcgi_param NEW_FILE $new_file;
        fastcgi_param HTTPS on;
        fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice
        fastcgi_param front_controller_active true;
        fastcgi_pass php-owncloud;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering on; #Available since nginx 1.7.11
    }

    location ^~ /remote.php/webdav {
        if ($request_method != PUT){
            rewrite ^/remote.php/(.*)$ /remote-redirected/$1 last;
        }
        set $before_upload false;
        set $after_upload false;
        set $new_file false;
        lua_code_cache off;
        resolver 192.168.10.197;
        content_by_lua_file /usr/local/openresty/remote.lua;
    }
 
    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
        try_files $uri $uri/ =404;
        index index.php;
    }
 
    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~* \.(?:css|js)$ {
        try_files $uri /index.php$uri$is_args$args;
        add_header Cache-Control "public, max-age=7200";
        # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)
        # Before enabling Strict-Transport-Security headers please read into this topic first.
        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        # Optional: Don't log access to assets
        access_log off;
    }
 
    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
        try_files $uri /index.php$uri$is_args$args;
        # Optional: Don't log access to other assets
        access_log off;
    }
}